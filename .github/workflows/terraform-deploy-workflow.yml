name: 'Terraform Deployment'

on:
  push:
    branches:
    - main

env:
  ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
  BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP }}
  BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
  BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
  BACKEND_TF_STATE_FILE_NAME: test/inf.tfstate
  TERRAFORM_VERSION: 1.1.2

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure
    # the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: ${TERRAFORM_VERSION}

    # Initialize a new or existing Terraform working directory
    # by creating initial files, loading any remote state,
    # downloading modules, etc.
    - name: Terraform Init
      run: |
        ${{ github.workspace }}/.github/scripts/terraform-task.sh init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        ${{ github.workspace }}/.github/scripts/terraform-task.sh plan

    # Generates an execution plan for Terraform
    - name: Terraform Apply
      run: |
        echo "Terraform Apply"
        # sh ${{ github.workspace }}/.github/scripts/terraform-task.sh apply
