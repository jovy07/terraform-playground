# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

env:
  BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP }}
  BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
  BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
  ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
  TF_VAR_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
  TF_VAR_client_id: ${{ secrets.AZ_CLIENT_ID }}
  TF_VAR_client_secret: ${{ secrets.AZ_CLIENT_SECRET }}
  TF_VAR_tenant_id: ${{ secrets.AZ_TENANT_ID }}
  TERRAFORM_VERSION: 1.1.2
  
jobs:
  terraform-init-test:
    name: 'Terraform Init'
    runs-on: ubuntu-latest
    env:
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      TF_VAR_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZ_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZ_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZ_TENANT_ID }}
    environment: playground

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.1.2

    # Show Terraform Version
    - name: Terraform Version
      run: terraform --version

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        sh ${{ github.workspace }}/.github/scripts/tf-tasks.sh init
      shell: bash

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        sh ${{ github.workspace }}/.github/scripts/tf-tasks.sh fmt

    # Terraform validate
    - name: Terraform Validate
      run: |
        sh ${{ github.workspace }}/.github/scripts/tf-tasks.sh validate

    # Create Terraform Artifact
    - name: Publish Terraform artifact
      uses: actions/upload-artifact@v2
      with:
        name: terraform
        path: |
         ${{ github.workspace }}
         !${{ github.workspace }}/.terraform

  tfsec-scan:
    needs: [terraform-init-test]
    name: 'Runs tfsec scan'
    runs-on: ubuntu-latest
    env:
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      TF_VAR_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZ_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZ_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZ_TENANT_ID }}
    environment: playground

    steps:
    # Download the terraform artifact
    - name: Download the terraform artifact
      uses: actions/download-artifact@v2
      with:
        name: terraform
        path: ${{ github.workspace }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.1.2

    # Show Terraform Version
    - name: Terraform Version
      run: terraform --version

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        sh ${{ github.workspace }}/.github/scripts/tf-tasks.sh init
      shell: bash
      
    - name: Run tfsec check pr commenter
      uses: aquasecurity/tfsec-pr-commenter-action@main
      with:
        github_token: ${{ github.token }}

    - name: Generate tfsec sarif report
      uses: tfsec/tfsec-sarif-action@master
      with:
        sarif_file: tfsec.sarif
    
    - name: Upload SARIF report
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: tfsec.sarif 

    - name: Run tfsec in dedicated docker container
      uses: docker://aquasec/tfsec-ci
      with:
        args: tfsec

  terraform-plan:
    needs: [tfsec-scan]
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      TF_VAR_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZ_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZ_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZ_TENANT_ID }}
    environment: playground

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Download the terraform artifact
    - name: Download the terraform artifact
      uses: actions/download-artifact@v2
      with:
        name: terraform
        path: ${{ github.workspace }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.1.2

    # - name: Azure Login
    #   uses: Azure/login@v1
    #   with:
    #     # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}
    #     # creds: ${{ secrets.AZ_CLIENT_SECRET }}
    #     # ClientId of the Azure Service principal created.
    #     # client-id: ${{ secrets.AZ_CLIENT_ID }}
    #     # TenantId of the Azure Service principal created.
    #     # tenant-id: ${{ secrets.AZ_TENANT_ID }}
    #     # Azure subscriptionId
    #     # subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
    #     # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
    #     # enable-AzPSSession: # optional
    #     # Name of the environment. Supported values are azurecloud, azurestack, azureusgovernment, azurechinacloud, azuregermancloud. Default being azurecloud
    #     # environment: # optional, default is azurecloud
    #     # Set this value to true to enable support for accessing tenants without subscriptions
    #     # allow-no-subscriptions: # optional
    #     # Provide audience field for access-token. Default value is api://AzureADTokenExchange
    #     # audience: # optional, default is api://AzureADTokenExchange

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        sh ${{ github.workspace }}/.github/scripts/tf-tasks.sh init
      shell: bash

    # Show Terraform Version
    - name: Terraform Version
      run: terraform --version

    # Change file permissions
    - name: Change File Permission
      run: chmod -R +x ${{ github.workspace }}/.terraform/providers/

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        sh ${{ github.workspace }}/.github/scripts/tf-tasks.sh plan

    - name: Checkov GitHub Action
      # You may pin to the exact commit or the version.
      # uses: bridgecrewio/checkov-action@00cc657f4d415593e5c8897bc87f490497ccb5f9
      uses: bridgecrewio/checkov-action@v12.641.0
      with:
        # directory with infrastructure code to scan
        directory: modules
        # Run scan only on a specific check identifier (comma separated)
        # check: # optional
        # Run scan on all checks but a specific check identifier (comma separated)
        # skip_check: # optional
        # display only failed checks
        # quiet: # optional
        # do not return an error code if there are failed checks
        # soft_fail: # optional
        # run only on a specific infrastructure
        framework: terraform
        # comma separated list of external (custom) checks directories
        # external_checks_dirs: # optional
        # comma separated list of external (custom) checks repositories
        # external_checks_repos: # optional
        # The format of the output. cli, json, junitxml, github_failed_only
        # output_format: # optional
        # download external terraform modules from public git repositories and terraform registry:true, false
        # download_external_modules: # optional
        # log level
        # log_level: # optional, default is WARNING

    # - name: Wait for Terraform Plan Approval
    #   # You may pin to the exact commit or the version.
    #   # uses: jbergknoff/github-action-wait-for-terraform-plan-approval@ff23ef35b5f0ee7f41a5e9df6cc5df1700f0c6e6
    #   uses: jbergknoff/github-action-wait-for-terraform-plan-approval@v1
    #   with:
    #     # What to do: either `submit` or `wait`.
    #     command: # default is submit
    #     # The contents of the plan. ANSI color codes are fine. This should be plaintext, not base64-encoded. Required when `command == submit`.
    #     plan_contents: # optional
    #     # The plan id to wait for. Required when `command == wait`.
    #     plan_id: # optional
    #     # Base URL for the external service that will display plans for approval
    #     external_service_url: # optional, default is https://terraform-plan-approval.herokuapp.com
    #     # Give up waiting for approval/rejection after this many seconds
    #     timeout_seconds: # optional, default is 300
    #     # The interval (in seconds) at which we'll check the plan status
    #     polling_period_seconds: # optional, default is 5

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        sh ${{ github.workspace }}/.github/scripts/tf-tasks.sh apply
      # run: terraform apply -auto-approve -input=false -compact-warnings
